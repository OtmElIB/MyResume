// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210301205533_SeedFirstData")]
    partial class SeedFirstData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ProfessionalExperienceTechnology", b =>
                {
                    b.Property<long>("ProfessionalExperiencesID")
                        .HasColumnType("bigint");

                    b.Property<long>("TechnologiesID")
                        .HasColumnType("bigint");

                    b.HasKey("ProfessionalExperiencesID", "TechnologiesID");

                    b.HasIndex("TechnologiesID");

                    b.ToTable("ProfessionalExperienceTechnology");
                });

            modelBuilder.Entity("Repository.Models.Distinction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 366, DateTimeKind.Local).AddTicks(8589));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Distinction");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Title = "2ème place au Microsoft Imagine Cup Maroc 2016"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Title = "Bénévole au collectif Autisme Maroc 2016"
                        },
                        new
                        {
                            ID = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Title = "Certifié MTA: Windows Server Administration Fundamentals"
                        });
                });

            modelBuilder.Entity("Repository.Models.Language", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 367, DateTimeKind.Local).AddTicks(8632));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 90,
                            Title = "Francais"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 80,
                            Title = "Anglais"
                        },
                        new
                        {
                            ID = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 100,
                            Title = "Arabe"
                        });
                });

            modelBuilder.Entity("Repository.Models.Link", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 368, DateTimeKind.Local).AddTicks(5476));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Link");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Title = "LinkedIn",
                            Url = "https://www.linkedin.com/in/otmane-el-ibaoui/"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Title = "GitHub",
                            Url = "https://github.com/OtmElIB"
                        });
                });

            modelBuilder.Entity("Repository.Models.PEType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 369, DateTimeKind.Local).AddTicks(2778));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PEType");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultant"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Stage"
                        });
                });

            modelBuilder.Entity("Repository.Models.Person", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 356, DateTimeKind.Local).AddTicks(5614));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Address = "52 rue gambetta, Levallois Perret 92300",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "otmelib@gmail.com",
                            Name = "El Ibaoui Otmane",
                            PhoneNumber = "0659058512",
                            Title = "Consultant Microsoft .Net/.Net Core / C#"
                        });
                });

            modelBuilder.Entity("Repository.Models.ProfessionalExperience", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 370, DateTimeKind.Local).AddTicks(4969));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TypeID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.HasIndex("TypeID");

                    b.ToTable("ProfessionalExperience");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CompanyName = "MNE",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultant .Net Framework MVC/C# ",
                            TypeID = 1L
                        },
                        new
                        {
                            ID = 2L,
                            CompanyName = "CDsicount",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultant FullStack .Net Framework",
                            TypeID = 1L
                        },
                        new
                        {
                            ID = 3L,
                            CompanyName = "SMoney",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultant FullStack .Net Framework",
                            TypeID = 1L
                        },
                        new
                        {
                            ID = 4L,
                            CompanyName = "AFNOR",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultant FullStack .Net Core",
                            TypeID = 1L
                        });
                });

            modelBuilder.Entity("Repository.Models.Skill", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 372, DateTimeKind.Local).AddTicks(5480));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 90,
                            Title = "C# / TypeScript"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 80,
                            Title = "Asp.Net MVC / WebAPI "
                        },
                        new
                        {
                            ID = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 80,
                            Title = "Asp.Net / Asp.Net Core"
                        },
                        new
                        {
                            ID = 4L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 70,
                            Title = "SqlServer / MySql / PostgreSql"
                        },
                        new
                        {
                            ID = 5L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 90,
                            Title = "EF / EF Core"
                        },
                        new
                        {
                            ID = 6L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 85,
                            Title = "Visual Studio / Visual Stuio Code"
                        },
                        new
                        {
                            ID = 7L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 90,
                            Title = "TFS / Git / Azure DevOps / GitHub"
                        },
                        new
                        {
                            ID = 8L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            Score = 80,
                            Title = "TDD / BDD / nUnit / SpecFlow"
                        });
                });

            modelBuilder.Entity("Repository.Models.Task", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 373, DateTimeKind.Local).AddTicks(3287));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ProfessionalExperienceID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ProfessionalExperienceID");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 1L,
                            Title = "Migration de l'application web Massar de Silverlight vers Asp.Net MVC 5."
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 1L,
                            Title = "Evolution des services utilisés par l'application Massar"
                        },
                        new
                        {
                            ID = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 1L,
                            Title = "Amélioration des performances (time processing, bug fixes et utilisation d'Api externes pour une meilleure user experience)"
                        },
                        new
                        {
                            ID = 4L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 1L,
                            Title = "Développement de nouvelles fonctionnalités"
                        },
                        new
                        {
                            ID = 5L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 1L,
                            Title = "Archivage et Shelve et Code Reviewsous TFS"
                        },
                        new
                        {
                            ID = 6L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Maintenance et évolution des services utilisés par les applications Cdiscount"
                        },
                        new
                        {
                            ID = 7L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Développement des nouvelles fonctionnalités sur les différents sites: Cdiscount Market Place,Seller Zone,Esus,GoSport,Cdiscount Pro"
                        },
                        new
                        {
                            ID = 8L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Optimisation des performances"
                        },
                        new
                        {
                            ID = 9L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Analyse et correction des bugs sur les différents sites"
                        },
                        new
                        {
                            ID = 10L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Développement, tests unitaires et tests d'intégration"
                        },
                        new
                        {
                            ID = 11L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 2L,
                            Title = "Archivage, shelve, merge et Code Reviewsous TFS"
                        },
                        new
                        {
                            ID = 12L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Développement des nouvelles fonctionnalités et maintenance des applications(l’Api et l’Espace partenaire) au sain de l’équipe cœur du métier de Smoney"
                        },
                        new
                        {
                            ID = 13L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Analyse et correction desbugssurlesdifférentes applications"
                        },
                        new
                        {
                            ID = 14L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "AsDéveloppement de la nouvelle version de l’espace partenaire"
                        },
                        new
                        {
                            ID = 15L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Conception, architecture etréalisation de la nouvelle application quisert de parcours d’inscription"
                        },
                        new
                        {
                            ID = 16L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Développement destests unitaires surl’application"
                        },
                        new
                        {
                            ID = 17L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Intégration continue via Azure DevOps"
                        },
                        new
                        {
                            ID = 18L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 3L,
                            Title = "Déploiement des applications et des différentes release su différents serveurs"
                        },
                        new
                        {
                            ID = 19L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Refonte complète de la boutique normes (FrontOffice) qui sert à acheter et vendre ces dernières en utilisant la méthode Agile."
                        },
                        new
                        {
                            ID = 20L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Validation et pesage des Uses Story avec l’équipe PO"
                        },
                        new
                        {
                            ID = 21L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Développement des tests unitaires et fonctionnels "
                        },
                        new
                        {
                            ID = 22L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Front End : intégration des maquettes développées par l’intégrateur"
                        },
                        new
                        {
                            ID = 23L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Mise en place des architectures applicative du front office et back office"
                        },
                        new
                        {
                            ID = 24L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Développements de la partie parcours d’achats et l’espace personnel du site et paiement CB(ATOS)"
                        },
                        new
                        {
                            ID = 25L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Participation au développements du nouveau Framework qui sera par la suite utilisé par le reste des équipes"
                        },
                        new
                        {
                            ID = 26L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Création de micro services pour chaque application tier"
                        },
                        new
                        {
                            ID = 27L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalExperienceID = 4L,
                            Title = "Déploiement et intégration continue via Azure DevOps"
                        });
                });

            modelBuilder.Entity("Repository.Models.Technology", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 374, DateTimeKind.Local).AddTicks(1950));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Technology");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Visual Studio 2015"
                        },
                        new
                        {
                            ID = 2L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Visual Studio 2019"
                        },
                        new
                        {
                            ID = 3L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Visual Studio Code"
                        },
                        new
                        {
                            ID = 4L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "TFS"
                        },
                        new
                        {
                            ID = 5L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "GIT"
                        },
                        new
                        {
                            ID = 6L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Azure DevOps"
                        },
                        new
                        {
                            ID = 7L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SqlServer 2012"
                        },
                        new
                        {
                            ID = 8L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SqlServer 2016"
                        },
                        new
                        {
                            ID = 9L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "PostgreSql"
                        },
                        new
                        {
                            ID = 10L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "C#"
                        },
                        new
                        {
                            ID = 11L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "TypeScript"
                        },
                        new
                        {
                            ID = 12L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript"
                        },
                        new
                        {
                            ID = 13L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "jQuery"
                        },
                        new
                        {
                            ID = 14L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Asp.Net MVC 5"
                        },
                        new
                        {
                            ID = 15L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Asp.Net MVC Core"
                        },
                        new
                        {
                            ID = 16L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Asp.Net WebApi 2"
                        },
                        new
                        {
                            ID = 17L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Asp.Net Core WebApi"
                        },
                        new
                        {
                            ID = 18L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "EntityFramework 6"
                        },
                        new
                        {
                            ID = 19L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "EntityFramework Core 3"
                        },
                        new
                        {
                            ID = 20L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Html"
                        },
                        new
                        {
                            ID = 21L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Css"
                        },
                        new
                        {
                            ID = 22L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "csHtml"
                        },
                        new
                        {
                            ID = 23L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SQL"
                        },
                        new
                        {
                            ID = 24L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "EntityFramework 6"
                        },
                        new
                        {
                            ID = 25L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "nUnit"
                        },
                        new
                        {
                            ID = 26L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SpecFlow"
                        },
                        new
                        {
                            ID = 27L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "AutoMapper"
                        },
                        new
                        {
                            ID = 28L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "FluentValidation"
                        },
                        new
                        {
                            ID = 29L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "RestSharp"
                        },
                        new
                        {
                            ID = 30L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SonarLint"
                        },
                        new
                        {
                            ID = 31L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "FxCop"
                        },
                        new
                        {
                            ID = 32L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Security Code Scan"
                        },
                        new
                        {
                            ID = 33L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Application Insights"
                        },
                        new
                        {
                            ID = 34L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "PostMan"
                        },
                        new
                        {
                            ID = 35L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Angular 5"
                        });
                });

            modelBuilder.Entity("Repository.Models.Training", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 3, 1, 21, 55, 33, 375, DateTimeKind.Local).AddTicks(2342));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PersonID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Training");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonID = 1L,
                            SchoolName = "EMSI",
                            Title = "Ingénierie informatique option MIAGE",
                            Year = 2016
                        });
                });

            modelBuilder.Entity("ProfessionalExperienceTechnology", b =>
                {
                    b.HasOne("Repository.Models.ProfessionalExperience", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalExperiencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Technology", null)
                        .WithMany()
                        .HasForeignKey("TechnologiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Distinction", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("Distinctions")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Repository.Models.Language", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("Languages")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Repository.Models.Link", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("Links")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Repository.Models.ProfessionalExperience", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("ProfessionalExperiences")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.PEType", "Type")
                        .WithMany("ProfessionalExperiences")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Repository.Models.Skill", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("Skills")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Repository.Models.Task", b =>
                {
                    b.HasOne("Repository.Models.ProfessionalExperience", "ProfessionalExperience")
                        .WithMany("Tasks")
                        .HasForeignKey("ProfessionalExperienceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalExperience");
                });

            modelBuilder.Entity("Repository.Models.Training", b =>
                {
                    b.HasOne("Repository.Models.Person", "Person")
                        .WithMany("Trainings")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Repository.Models.PEType", b =>
                {
                    b.Navigation("ProfessionalExperiences");
                });

            modelBuilder.Entity("Repository.Models.Person", b =>
                {
                    b.Navigation("Distinctions");

                    b.Navigation("Languages");

                    b.Navigation("Links");

                    b.Navigation("ProfessionalExperiences");

                    b.Navigation("Skills");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("Repository.Models.ProfessionalExperience", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
